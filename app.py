import streamlit as st
import pandas as pd
import google.generativeai as genai

# ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ
st.set_page_config(page_title="Gemini Chat + CSV Upload", layout="wide")
st.title("ü§ñ Gemini Chat with CSV Upload")

# ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV
st.header("üìÇ Upload Your CSV File")
try:
    uploaded_file = st.file_uploader("Choose a CSV file", type="csv")

    if uploaded_file is not None:
        st.session_state.uploaded_data = pd.read_csv(uploaded_file)
        st.success("‚úÖ File successfully uploaded and read.")
        st.dataframe(st.session_state.uploaded_data.head())
except Exception as e:
    st.error(f"‚ùå Error while uploading file: {e}")

st.markdown("---")

# ‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö Gemini
st.header("üí¨ Chat with Gemini")

try:
    # ‡πÇ‡∏´‡∏•‡∏î API Key ‡∏à‡∏≤‡∏Å secrets
    key = st.secrets["gemini_api_key"]
    genai.configure(api_key=key)
    model = genai.GenerativeModel("gemini-2.0-flash-lite")

    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô session
    if "chat" not in st.session_state:
        st.session_state.chat = model.start_chat(history=[])

    def role_to_streamlit(role: str) -> str:
        return "assistant" if role == "model" else role

    # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏ó
    for message in st.session_state.chat.history:
        with st.chat_message(role_to_streamlit(message.role)):
            for part in message.parts:
                st.markdown(part.text)

    # ‡∏£‡∏±‡∏ö prompt ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    if prompt := st.chat_input("Type your message here..."):
        st.chat_message("user").markdown(prompt)
        response = st.session_state.chat.send_message(prompt)
        with st.chat_message("assistant"):
            st.markdown(response.text)

except Exception as e:
    st.error(f"‚ùå An error occurred while using Gemini: {e}")
